package data

import "fmt"

// This file is generated by goenums; DO NOT EDIT

// ResponseStatus wraps an enum value of type responseStatus to enforce type safety.
type ResponseStatus struct {
	responseStatus
}

// responseStatus is the underlying type of ResponseStatus and should not be used directly.
type responseStatus int

const (
	unknownResponseStatus responseStatus = iota
	sentResponseStatus
	seenResponseStatus
	yesResponseStatus
	noResponseStatus
	maybeResponseStatus
)

var (
	strResponseStatusArray = [...]string{
		sentResponseStatus:  "SENT",
		seenResponseStatus:  "SEEN",
		yesResponseStatus:   "YES",
		noResponseStatus:    "NO",
		maybeResponseStatus: "MAYBE",
	}

	typeResponseStatusMap = map[string]responseStatus{
		"SENT":  sentResponseStatus,
		"SEEN":  seenResponseStatus,
		"YES":   yesResponseStatus,
		"NO":    noResponseStatus,
		"MAYBE": maybeResponseStatus,
	}
)

// String returns the string representation of the enum value
func (r responseStatus) String() string {
	return strResponseStatusArray[r]
}

// ParseResponseStatus attempts to parse the given value into ResponseStatus.
// It supports string, fmt.Stringer, int, int64, and int32.
// If the value is not a valid ResponseStatus or the value is not a supported type, it will return the enums unknown value (unknownResponseStatus).
func ParseResponseStatus(a any) ResponseStatus {
	switch v := a.(type) {
	case ResponseStatus:
		return v
	case string:
		return ResponseStatus{stringToResponseStatus(v)}
	case fmt.Stringer:
		return ResponseStatus{stringToResponseStatus(v.String())}
	case int:
		return ResponseStatus{responseStatus(v)}
	case int64:
		return ResponseStatus{responseStatus(int(v))}
	case int32:
		return ResponseStatus{responseStatus(int(v))}
	}
	return ResponseStatus{unknownResponseStatus}
}

// stringToResponseStatus attempts to parse the given string into ResponseStatus.
// If the value is not a valid ResponseStatus, it will return the enums unknown value (unknownResponseStatus).
func stringToResponseStatus(s string) responseStatus {
	if v, ok := typeResponseStatusMap[s]; ok {
		return v
	}
	return unknownResponseStatus
}

// IsValid returns true if the enum value is valid.
// The unknown value (unknownResponseStatus) is not considered valid.
func (r responseStatus) IsValid() bool {
	return r >= responseStatus(1) && r <= responseStatus(len(strResponseStatusArray))
}

// ResponseStatusContainer contains all possible values of type ResponseStatus.
type ResponseStatusContainer struct {
	UNKNOWN ResponseStatus
	SENT    ResponseStatus
	SEEN    ResponseStatus
	YES     ResponseStatus
	NO      ResponseStatus
	MAYBE   ResponseStatus
}

// ResponseStatuses is a global instance of ResponseStatusContainer that contains all possible values of type ResponseStatus.
var ResponseStatuses = ResponseStatusContainer{
	UNKNOWN: ResponseStatus{unknownResponseStatus},
	SENT:    ResponseStatus{sentResponseStatus},
	SEEN:    ResponseStatus{seenResponseStatus},
	YES:     ResponseStatus{yesResponseStatus},
	NO:      ResponseStatus{noResponseStatus},
	MAYBE:   ResponseStatus{maybeResponseStatus},
}

// All returns a slice containing all possible values of type ResponseStatus.
func (c ResponseStatusContainer) All() []ResponseStatus {
	return []ResponseStatus{
		c.SENT,
		c.SEEN,
		c.YES,
		c.NO,
		c.MAYBE,
	}
}

// MarshalJSON returns the JSON representation of the enum value.
func (r *ResponseStatus) MarshalJSON() ([]byte, error) {
	return []byte(`"` + r.String() + `"`), nil
}

// UnmarshalJSON parses the JSON representation of the enum value.
func (r *ResponseStatus) UnmarshalJSON(b []byte) error {
	*r = ParseResponseStatus(string(b))
	return nil
}
