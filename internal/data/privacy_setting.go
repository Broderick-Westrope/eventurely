package data

import "fmt"

// This file is generated by goenums; DO NOT EDIT

//go:generate stringer -type=PrivacySetting -output=privacySetting_string.go
type PrivacySetting struct {
	privacySetting
}

type privacySetting int

const (
	unknownPrivacySetting privacySetting = iota
	publicPrivacySetting
	privatePrivacySetting
)

var (
	strPrivacySettingArray = [...]string{
		publicPrivacySetting:  "PUBLIC",
		privatePrivacySetting: "PRIVATE",
	}

	typePrivacySettingMap = map[string]privacySetting{
		"PUBLIC":  publicPrivacySetting,
		"PRIVATE": privatePrivacySetting,
	}
)

func (p privacySetting) String() string {
	return strPrivacySettingArray[p]
}

func ParsePrivacySetting(a any) PrivacySetting {
	switch v := a.(type) {
	case PrivacySetting:
		return v
	case string:
		return PrivacySetting{stringToPrivacySetting(v)}
	case fmt.Stringer:
		return PrivacySetting{stringToPrivacySetting(v.String())}
	case int:
		return PrivacySetting{privacySetting(v)}
	case int64:
		return PrivacySetting{privacySetting(int(v))}
	case int32:
		return PrivacySetting{privacySetting(int(v))}
	}
	return PrivacySetting{unknownPrivacySetting}
}

func stringToPrivacySetting(s string) privacySetting {
	if v, ok := typePrivacySettingMap[s]; ok {
		return v
	}
	return unknownPrivacySetting
}

func (p privacySetting) IsValid() bool {
	return p >= privacySetting(1) && p <= privacySetting(len(strPrivacySettingArray))
}

type PrivacySettingContainer struct {
	UNKNOWN PrivacySetting
	PUBLIC  PrivacySetting
	PRIVATE PrivacySetting
}

var PrivacySettings = PrivacySettingContainer{
	UNKNOWN: PrivacySetting{unknownPrivacySetting},
	PUBLIC:  PrivacySetting{publicPrivacySetting},
	PRIVATE: PrivacySetting{privatePrivacySetting},
}

func (c PrivacySettingContainer) All() []PrivacySetting {
	return []PrivacySetting{
		c.PUBLIC,
		c.PRIVATE,
	}
}

func (p *PrivacySetting) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *PrivacySetting) UnmarshalJSON(b []byte) error {
	*p = ParsePrivacySetting(string(b))
	return nil
}
