package data

import "fmt"

// This file is generated by goenums; DO NOT EDIT

//go:generate stringer -type=Responsestatus -output=responsestatus_string.go
type Responsestatus struct {
	responsestatus
}

type responsestatus int

const (
	unknownResponsestatus responsestatus = iota
	sentResponsestatus
	seenResponsestatus
	yesResponsestatus
	noResponsestatus
	maybeResponsestatus
)

var (
	strResponsestatusArray = [...]string{
		sentResponsestatus:  "SENT",
		seenResponsestatus:  "SEEN",
		yesResponsestatus:   "YES",
		noResponsestatus:    "NO",
		maybeResponsestatus: "MAYBE",
	}

	typeResponsestatusMap = map[string]responsestatus{
		"SENT":  sentResponsestatus,
		"SEEN":  seenResponsestatus,
		"YES":   yesResponsestatus,
		"NO":    noResponsestatus,
		"MAYBE": maybeResponsestatus,
	}
)

func (r responsestatus) String() string {
	return strResponsestatusArray[r]
}

func ParseResponsestatus(a any) Responsestatus {
	switch v := a.(type) {
	case Responsestatus:
		return v
	case string:
		return Responsestatus{stringToResponsestatus(v)}
	case fmt.Stringer:
		return Responsestatus{stringToResponsestatus(v.String())}
	case int:
		return Responsestatus{responsestatus(v)}
	case int64:
		return Responsestatus{responsestatus(int(v))}
	case int32:
		return Responsestatus{responsestatus(int(v))}
	}
	return Responsestatus{unknownResponsestatus}
}

func stringToResponsestatus(s string) responsestatus {
	if v, ok := typeResponsestatusMap[s]; ok {
		return v
	}
	return unknownResponsestatus
}

func (r responsestatus) IsValid() bool {
	return r >= responsestatus(1) && r <= responsestatus(len(strResponsestatusArray))
}

type ResponsestatusContainer struct {
	UNKNOWN Responsestatus
	SENT    Responsestatus
	SEEN    Responsestatus
	YES     Responsestatus
	NO      Responsestatus
	MAYBE   Responsestatus
}

var Responsestatuses = ResponsestatusContainer{
	UNKNOWN: Responsestatus{unknownResponsestatus},
	SENT:    Responsestatus{sentResponsestatus},
	SEEN:    Responsestatus{seenResponsestatus},
	YES:     Responsestatus{yesResponsestatus},
	NO:      Responsestatus{noResponsestatus},
	MAYBE:   Responsestatus{maybeResponsestatus},
}

func (c ResponsestatusContainer) All() []Responsestatus {
	return []Responsestatus{
		c.SENT,
		c.SEEN,
		c.YES,
		c.NO,
		c.MAYBE,
	}
}

func (r *Responsestatus) MarshalJSON() ([]byte, error) {
	return []byte(`"` + r.String() + `"`), nil
}

func (r *Responsestatus) UnmarshalJSON(b []byte) error {
	*r = ParseResponsestatus(string(b))
	return nil
}
