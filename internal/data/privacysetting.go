package data

import "fmt"

// This file is generated by goenums; DO NOT EDIT

//go:generate stringer -type=Privacysetting -output=privacysetting_string.go
type Privacysetting struct {
	privacysetting
}

type privacysetting int

const (
	unknownPrivacysetting privacysetting = iota
	publicPrivacysetting
	privatePrivacysetting
)

var (
	strPrivacysettingArray = [...]string{
		publicPrivacysetting:  "PUBLIC",
		privatePrivacysetting: "PRIVATE",
	}

	typePrivacysettingMap = map[string]privacysetting{
		"PUBLIC":  publicPrivacysetting,
		"PRIVATE": privatePrivacysetting,
	}
)

func (p privacysetting) String() string {
	return strPrivacysettingArray[p]
}

func ParsePrivacysetting(a any) Privacysetting {
	switch v := a.(type) {
	case Privacysetting:
		return v
	case string:
		return Privacysetting{stringToPrivacysetting(v)}
	case fmt.Stringer:
		return Privacysetting{stringToPrivacysetting(v.String())}
	case int:
		return Privacysetting{privacysetting(v)}
	case int64:
		return Privacysetting{privacysetting(int(v))}
	case int32:
		return Privacysetting{privacysetting(int(v))}
	}
	return Privacysetting{unknownPrivacysetting}
}

func stringToPrivacysetting(s string) privacysetting {
	if v, ok := typePrivacysettingMap[s]; ok {
		return v
	}
	return unknownPrivacysetting
}

func (p privacysetting) IsValid() bool {
	return p >= privacysetting(1) && p <= privacysetting(len(strPrivacysettingArray))
}

type PrivacysettingContainer struct {
	UNKNOWN Privacysetting
	PUBLIC  Privacysetting
	PRIVATE Privacysetting
}

var Privacysettings = PrivacysettingContainer{
	UNKNOWN: Privacysetting{unknownPrivacysetting},
	PUBLIC:  Privacysetting{publicPrivacysetting},
	PRIVATE: Privacysetting{privatePrivacysetting},
}

func (c PrivacysettingContainer) All() []Privacysetting {
	return []Privacysetting{
		c.PUBLIC,
		c.PRIVATE,
	}
}

func (p *Privacysetting) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Privacysetting) UnmarshalJSON(b []byte) error {
	*p = ParsePrivacysetting(string(b))
	return nil
}
