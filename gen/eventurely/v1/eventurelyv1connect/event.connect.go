// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eventurely/v1/event.proto

package eventurelyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Broderick-Westrope/eventurely/gen/eventurely/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "eventurely.v1.EventService"
	// InvitationServiceName is the fully-qualified name of the InvitationService service.
	InvitationServiceName = "eventurely.v1.InvitationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceCreateEventProcedure is the fully-qualified name of the EventService's CreateEvent
	// RPC.
	EventServiceCreateEventProcedure = "/eventurely.v1.EventService/CreateEvent"
	// EventServiceGetEventProcedure is the fully-qualified name of the EventService's GetEvent RPC.
	EventServiceGetEventProcedure = "/eventurely.v1.EventService/GetEvent"
	// EventServiceUpdateEventProcedure is the fully-qualified name of the EventService's UpdateEvent
	// RPC.
	EventServiceUpdateEventProcedure = "/eventurely.v1.EventService/UpdateEvent"
	// EventServiceListUpcomingOwnedEventsProcedure is the fully-qualified name of the EventService's
	// ListUpcomingOwnedEvents RPC.
	EventServiceListUpcomingOwnedEventsProcedure = "/eventurely.v1.EventService/ListUpcomingOwnedEvents"
	// EventServiceListUpcomingInvitedEventsProcedure is the fully-qualified name of the EventService's
	// ListUpcomingInvitedEvents RPC.
	EventServiceListUpcomingInvitedEventsProcedure = "/eventurely.v1.EventService/ListUpcomingInvitedEvents"
	// EventServiceListPastEventsProcedure is the fully-qualified name of the EventService's
	// ListPastEvents RPC.
	EventServiceListPastEventsProcedure = "/eventurely.v1.EventService/ListPastEvents"
	// InvitationServiceUpdateInvitationStatusProcedure is the fully-qualified name of the
	// InvitationService's UpdateInvitationStatus RPC.
	InvitationServiceUpdateInvitationStatusProcedure = "/eventurely.v1.InvitationService/UpdateInvitationStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventServiceServiceDescriptor                           = v1.File_eventurely_v1_event_proto.Services().ByName("EventService")
	eventServiceCreateEventMethodDescriptor                 = eventServiceServiceDescriptor.Methods().ByName("CreateEvent")
	eventServiceGetEventMethodDescriptor                    = eventServiceServiceDescriptor.Methods().ByName("GetEvent")
	eventServiceUpdateEventMethodDescriptor                 = eventServiceServiceDescriptor.Methods().ByName("UpdateEvent")
	eventServiceListUpcomingOwnedEventsMethodDescriptor     = eventServiceServiceDescriptor.Methods().ByName("ListUpcomingOwnedEvents")
	eventServiceListUpcomingInvitedEventsMethodDescriptor   = eventServiceServiceDescriptor.Methods().ByName("ListUpcomingInvitedEvents")
	eventServiceListPastEventsMethodDescriptor              = eventServiceServiceDescriptor.Methods().ByName("ListPastEvents")
	invitationServiceServiceDescriptor                      = v1.File_eventurely_v1_event_proto.Services().ByName("InvitationService")
	invitationServiceUpdateInvitationStatusMethodDescriptor = invitationServiceServiceDescriptor.Methods().ByName("UpdateInvitationStatus")
)

// EventServiceClient is a client for the eventurely.v1.EventService service.
type EventServiceClient interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	ListUpcomingOwnedEvents(context.Context, *connect.Request[v1.ListUpcomingOwnedEventsRequest]) (*connect.Response[v1.ListUpcomingOwnedEventsResponse], error)
	ListUpcomingInvitedEvents(context.Context, *connect.Request[v1.ListUpcomingInvitedEventsRequest]) (*connect.Response[v1.ListUpcomingInvitedEventsResponse], error)
	ListPastEvents(context.Context, *connect.Request[v1.ListPastEventsRequest]) (*connect.Response[v1.ListPastEventsResponse], error)
}

// NewEventServiceClient constructs a client for the eventurely.v1.EventService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+EventServiceCreateEventProcedure,
			connect.WithSchema(eventServiceCreateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvent: connect.NewClient[v1.GetEventRequest, v1.GetEventResponse](
			httpClient,
			baseURL+EventServiceGetEventProcedure,
			connect.WithSchema(eventServiceGetEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEvent: connect.NewClient[v1.UpdateEventRequest, v1.UpdateEventResponse](
			httpClient,
			baseURL+EventServiceUpdateEventProcedure,
			connect.WithSchema(eventServiceUpdateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUpcomingOwnedEvents: connect.NewClient[v1.ListUpcomingOwnedEventsRequest, v1.ListUpcomingOwnedEventsResponse](
			httpClient,
			baseURL+EventServiceListUpcomingOwnedEventsProcedure,
			connect.WithSchema(eventServiceListUpcomingOwnedEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUpcomingInvitedEvents: connect.NewClient[v1.ListUpcomingInvitedEventsRequest, v1.ListUpcomingInvitedEventsResponse](
			httpClient,
			baseURL+EventServiceListUpcomingInvitedEventsProcedure,
			connect.WithSchema(eventServiceListUpcomingInvitedEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPastEvents: connect.NewClient[v1.ListPastEventsRequest, v1.ListPastEventsResponse](
			httpClient,
			baseURL+EventServiceListPastEventsProcedure,
			connect.WithSchema(eventServiceListPastEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	createEvent               *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getEvent                  *connect.Client[v1.GetEventRequest, v1.GetEventResponse]
	updateEvent               *connect.Client[v1.UpdateEventRequest, v1.UpdateEventResponse]
	listUpcomingOwnedEvents   *connect.Client[v1.ListUpcomingOwnedEventsRequest, v1.ListUpcomingOwnedEventsResponse]
	listUpcomingInvitedEvents *connect.Client[v1.ListUpcomingInvitedEventsRequest, v1.ListUpcomingInvitedEventsResponse]
	listPastEvents            *connect.Client[v1.ListPastEventsRequest, v1.ListPastEventsResponse]
}

// CreateEvent calls eventurely.v1.EventService.CreateEvent.
func (c *eventServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetEvent calls eventurely.v1.EventService.GetEvent.
func (c *eventServiceClient) GetEvent(ctx context.Context, req *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// UpdateEvent calls eventurely.v1.EventService.UpdateEvent.
func (c *eventServiceClient) UpdateEvent(ctx context.Context, req *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return c.updateEvent.CallUnary(ctx, req)
}

// ListUpcomingOwnedEvents calls eventurely.v1.EventService.ListUpcomingOwnedEvents.
func (c *eventServiceClient) ListUpcomingOwnedEvents(ctx context.Context, req *connect.Request[v1.ListUpcomingOwnedEventsRequest]) (*connect.Response[v1.ListUpcomingOwnedEventsResponse], error) {
	return c.listUpcomingOwnedEvents.CallUnary(ctx, req)
}

// ListUpcomingInvitedEvents calls eventurely.v1.EventService.ListUpcomingInvitedEvents.
func (c *eventServiceClient) ListUpcomingInvitedEvents(ctx context.Context, req *connect.Request[v1.ListUpcomingInvitedEventsRequest]) (*connect.Response[v1.ListUpcomingInvitedEventsResponse], error) {
	return c.listUpcomingInvitedEvents.CallUnary(ctx, req)
}

// ListPastEvents calls eventurely.v1.EventService.ListPastEvents.
func (c *eventServiceClient) ListPastEvents(ctx context.Context, req *connect.Request[v1.ListPastEventsRequest]) (*connect.Response[v1.ListPastEventsResponse], error) {
	return c.listPastEvents.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the eventurely.v1.EventService service.
type EventServiceHandler interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	ListUpcomingOwnedEvents(context.Context, *connect.Request[v1.ListUpcomingOwnedEventsRequest]) (*connect.Response[v1.ListUpcomingOwnedEventsResponse], error)
	ListUpcomingInvitedEvents(context.Context, *connect.Request[v1.ListUpcomingInvitedEventsRequest]) (*connect.Response[v1.ListUpcomingInvitedEventsResponse], error)
	ListPastEvents(context.Context, *connect.Request[v1.ListPastEventsRequest]) (*connect.Response[v1.ListPastEventsResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceCreateEventHandler := connect.NewUnaryHandler(
		EventServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(eventServiceCreateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceGetEventHandler := connect.NewUnaryHandler(
		EventServiceGetEventProcedure,
		svc.GetEvent,
		connect.WithSchema(eventServiceGetEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceUpdateEventHandler := connect.NewUnaryHandler(
		EventServiceUpdateEventProcedure,
		svc.UpdateEvent,
		connect.WithSchema(eventServiceUpdateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceListUpcomingOwnedEventsHandler := connect.NewUnaryHandler(
		EventServiceListUpcomingOwnedEventsProcedure,
		svc.ListUpcomingOwnedEvents,
		connect.WithSchema(eventServiceListUpcomingOwnedEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceListUpcomingInvitedEventsHandler := connect.NewUnaryHandler(
		EventServiceListUpcomingInvitedEventsProcedure,
		svc.ListUpcomingInvitedEvents,
		connect.WithSchema(eventServiceListUpcomingInvitedEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceListPastEventsHandler := connect.NewUnaryHandler(
		EventServiceListPastEventsProcedure,
		svc.ListPastEvents,
		connect.WithSchema(eventServiceListPastEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/eventurely.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceCreateEventProcedure:
			eventServiceCreateEventHandler.ServeHTTP(w, r)
		case EventServiceGetEventProcedure:
			eventServiceGetEventHandler.ServeHTTP(w, r)
		case EventServiceUpdateEventProcedure:
			eventServiceUpdateEventHandler.ServeHTTP(w, r)
		case EventServiceListUpcomingOwnedEventsProcedure:
			eventServiceListUpcomingOwnedEventsHandler.ServeHTTP(w, r)
		case EventServiceListUpcomingInvitedEventsProcedure:
			eventServiceListUpcomingInvitedEventsHandler.ServeHTTP(w, r)
		case EventServiceListPastEventsProcedure:
			eventServiceListPastEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.CreateEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.GetEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.UpdateEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) ListUpcomingOwnedEvents(context.Context, *connect.Request[v1.ListUpcomingOwnedEventsRequest]) (*connect.Response[v1.ListUpcomingOwnedEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.ListUpcomingOwnedEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) ListUpcomingInvitedEvents(context.Context, *connect.Request[v1.ListUpcomingInvitedEventsRequest]) (*connect.Response[v1.ListUpcomingInvitedEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.ListUpcomingInvitedEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) ListPastEvents(context.Context, *connect.Request[v1.ListPastEventsRequest]) (*connect.Response[v1.ListPastEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.ListPastEvents is not implemented"))
}

// InvitationServiceClient is a client for the eventurely.v1.InvitationService service.
type InvitationServiceClient interface {
	UpdateInvitationStatus(context.Context, *connect.Request[v1.UpdateInvitationStatusRequest]) (*connect.Response[v1.UpdateInvitationStatusResponse], error)
}

// NewInvitationServiceClient constructs a client for the eventurely.v1.InvitationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInvitationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InvitationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &invitationServiceClient{
		updateInvitationStatus: connect.NewClient[v1.UpdateInvitationStatusRequest, v1.UpdateInvitationStatusResponse](
			httpClient,
			baseURL+InvitationServiceUpdateInvitationStatusProcedure,
			connect.WithSchema(invitationServiceUpdateInvitationStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// invitationServiceClient implements InvitationServiceClient.
type invitationServiceClient struct {
	updateInvitationStatus *connect.Client[v1.UpdateInvitationStatusRequest, v1.UpdateInvitationStatusResponse]
}

// UpdateInvitationStatus calls eventurely.v1.InvitationService.UpdateInvitationStatus.
func (c *invitationServiceClient) UpdateInvitationStatus(ctx context.Context, req *connect.Request[v1.UpdateInvitationStatusRequest]) (*connect.Response[v1.UpdateInvitationStatusResponse], error) {
	return c.updateInvitationStatus.CallUnary(ctx, req)
}

// InvitationServiceHandler is an implementation of the eventurely.v1.InvitationService service.
type InvitationServiceHandler interface {
	UpdateInvitationStatus(context.Context, *connect.Request[v1.UpdateInvitationStatusRequest]) (*connect.Response[v1.UpdateInvitationStatusResponse], error)
}

// NewInvitationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInvitationServiceHandler(svc InvitationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	invitationServiceUpdateInvitationStatusHandler := connect.NewUnaryHandler(
		InvitationServiceUpdateInvitationStatusProcedure,
		svc.UpdateInvitationStatus,
		connect.WithSchema(invitationServiceUpdateInvitationStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/eventurely.v1.InvitationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InvitationServiceUpdateInvitationStatusProcedure:
			invitationServiceUpdateInvitationStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInvitationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInvitationServiceHandler struct{}

func (UnimplementedInvitationServiceHandler) UpdateInvitationStatus(context.Context, *connect.Request[v1.UpdateInvitationStatusRequest]) (*connect.Response[v1.UpdateInvitationStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.InvitationService.UpdateInvitationStatus is not implemented"))
}
