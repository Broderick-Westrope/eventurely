// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eventurely/v1/event.proto

package eventurelyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Broderick-Westrope/eventurely/gen/eventurely/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "eventurely.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceCreateEventProcedure is the fully-qualified name of the EventService's CreateEvent
	// RPC.
	EventServiceCreateEventProcedure = "/eventurely.v1.EventService/CreateEvent"
	// EventServiceGetEventProcedure is the fully-qualified name of the EventService's GetEvent RPC.
	EventServiceGetEventProcedure = "/eventurely.v1.EventService/GetEvent"
	// EventServiceGetUpcomingEventsProcedure is the fully-qualified name of the EventService's
	// GetUpcomingEvents RPC.
	EventServiceGetUpcomingEventsProcedure = "/eventurely.v1.EventService/GetUpcomingEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventServiceServiceDescriptor                 = v1.File_eventurely_v1_event_proto.Services().ByName("EventService")
	eventServiceCreateEventMethodDescriptor       = eventServiceServiceDescriptor.Methods().ByName("CreateEvent")
	eventServiceGetEventMethodDescriptor          = eventServiceServiceDescriptor.Methods().ByName("GetEvent")
	eventServiceGetUpcomingEventsMethodDescriptor = eventServiceServiceDescriptor.Methods().ByName("GetUpcomingEvents")
)

// EventServiceClient is a client for the eventurely.v1.EventService service.
type EventServiceClient interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	GetUpcomingEvents(context.Context, *connect.Request[v1.GetUpcomingEventsRequest]) (*connect.Response[v1.GetUpcomingEventsResponse], error)
}

// NewEventServiceClient constructs a client for the eventurely.v1.EventService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+EventServiceCreateEventProcedure,
			connect.WithSchema(eventServiceCreateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvent: connect.NewClient[v1.GetEventRequest, v1.GetEventResponse](
			httpClient,
			baseURL+EventServiceGetEventProcedure,
			connect.WithSchema(eventServiceGetEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUpcomingEvents: connect.NewClient[v1.GetUpcomingEventsRequest, v1.GetUpcomingEventsResponse](
			httpClient,
			baseURL+EventServiceGetUpcomingEventsProcedure,
			connect.WithSchema(eventServiceGetUpcomingEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	createEvent       *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getEvent          *connect.Client[v1.GetEventRequest, v1.GetEventResponse]
	getUpcomingEvents *connect.Client[v1.GetUpcomingEventsRequest, v1.GetUpcomingEventsResponse]
}

// CreateEvent calls eventurely.v1.EventService.CreateEvent.
func (c *eventServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetEvent calls eventurely.v1.EventService.GetEvent.
func (c *eventServiceClient) GetEvent(ctx context.Context, req *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// GetUpcomingEvents calls eventurely.v1.EventService.GetUpcomingEvents.
func (c *eventServiceClient) GetUpcomingEvents(ctx context.Context, req *connect.Request[v1.GetUpcomingEventsRequest]) (*connect.Response[v1.GetUpcomingEventsResponse], error) {
	return c.getUpcomingEvents.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the eventurely.v1.EventService service.
type EventServiceHandler interface {
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error)
	GetUpcomingEvents(context.Context, *connect.Request[v1.GetUpcomingEventsRequest]) (*connect.Response[v1.GetUpcomingEventsResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceCreateEventHandler := connect.NewUnaryHandler(
		EventServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(eventServiceCreateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceGetEventHandler := connect.NewUnaryHandler(
		EventServiceGetEventProcedure,
		svc.GetEvent,
		connect.WithSchema(eventServiceGetEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceGetUpcomingEventsHandler := connect.NewUnaryHandler(
		EventServiceGetUpcomingEventsProcedure,
		svc.GetUpcomingEvents,
		connect.WithSchema(eventServiceGetUpcomingEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/eventurely.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceCreateEventProcedure:
			eventServiceCreateEventHandler.ServeHTTP(w, r)
		case EventServiceGetEventProcedure:
			eventServiceGetEventHandler.ServeHTTP(w, r)
		case EventServiceGetUpcomingEventsProcedure:
			eventServiceGetUpcomingEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.CreateEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.GetEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.GetEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) GetUpcomingEvents(context.Context, *connect.Request[v1.GetUpcomingEventsRequest]) (*connect.Response[v1.GetUpcomingEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eventurely.v1.EventService.GetUpcomingEvents is not implemented"))
}
